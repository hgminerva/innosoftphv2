@{
    ViewBag.Title = "EditTask";
}

<head>
    @Styles.Render("~/Content/styleD.css")
    <link rel="stylesheet" href="../fonts/font-awesome-4.6.1/css/font-awesome.min.css">
</head>
@Html.Partial("NavBar")

<div class="container">
    <section class="content-header">
        <h2>
            Task Detail
        </h2>
        <ol class="breadcrumb">
            <li><a href="../Software/Dashboard"><i class="fa fa-table"></i> Home</a></li>
            <li> <a href="../Software/Task">Task</a></li>
            <li class="active">Edit Task</li>
        </ol>
    </section>

    <div class="modal fade" id="cancelConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Are you sure? <i class="fa fa-times" aria-hidden="true"></i></h4>
                </div>
                <div class="modal-footer">
                    <a class="btn btn-danger btn-sm" href="/Software/Task" id="" onclick="">Yes</a>
                    <a id="" class="btn btn-primary btn-sm" data-dismiss="modal">No</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal for Task Sub ADD-->
    <div class="modal fade" id="addTaskSub" role="dialog">
        <div class="modal-dialog modal-lg" style="width: 80%;">
            <div class="modal-content">

                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Add Action</h4>
                </div>

                <div class="modal-body">
                    <form class="form-horizontal" id="add-form">
                        <div class="row">
                            <div class="col-sm-12">
                                <div class="form-group">
                                    <label for="barCode" class="col-sm-2 control-label">Action</label>
                                    <div class="col-sm-9">
                                        <textarea type="" class="form-control requiredField" id="actionTaskSubDiv"></textarea>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="doneDateDiv" class="col-sm-2 control-label">Date Called</label>
                                    <div class="col-sm-4">
                                        <div id="dateCalledDiv"></div>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="" class="col-sm-2 control-label">Time Called</label>
                                    <div class="col-sm-4">
                                        <div id="timeCalledDiv"></div>
                                    </div>
                                </div>


                                <div class="form-group">
                                    <label for="" class="col-sm-2 control-label">Finished Date</label>
                                    <div class="col-sm-6">
                                        <div id="finishedDateDiv"></div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="" class="col-sm-2 control-label">Finished Time</label>
                                    <div class="col-sm-6">
                                        <div id="finishedTimeDiv"></div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="barCode" class="col-sm-2 control-label">Remarks</label>
                                    <div class="col-sm-9">
                                        <textarea type="" class="form-control" id="remarksTaskSubDiv"></textarea>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-info" id="addTaskSubButton" onclick="cmdAddTaskSub()"><i class="fa fa-floppy-o" aria-hidden="true" disabled></i> Add</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete -->
    <div class="modal fade" id="deleteTaskSubConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Action? <i class="fa fa-trash"></i></h4>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger btn-sm" id="cmdConfirmDeleteStaff" onclick="cmdDeleteTaskSub()">Delete</button>
                    <button id="cmdConfirmDeleteCloseButton" class="btn btn-primary btn-sm" data-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <div class="panel panel-default">
        <div class="panel-heading">
            <div class="row">
                <div class="col-md-6"></div>
                <div class="col-md-6" align="right">
                    <button class="btn btn-primary" id="editButton" onclick="cmdEdit()"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> Edit</button>
                    <button type="button" class="btn btn-info" id="saveButton" onclick="cmdUpdate()"><i class="fa fa-floppy-o" aria-hidden="true" disabled></i> Save</button>
                    <button type="button" class="btn btn-info" id="printButton" onclick="cmdPrint()"><i class="fa fa-print" aria-hidden="true"></i> Print</button>
                    <button type="button" class="btn btn-danger" id="cancelButton" onclick="cmdCancel()"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
        <div class="panel-body">
            <form class="form-horizontal" id="add-form">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="barCode" class="col-sm-3 control-label">Task Date</label>
                            <div class="col-sm-4">
                                <input type="text" class="form-control requiredField" id="taskDateDiv" disabled>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="barCode" class="col-sm-3 control-label">Task No</label>
                            <div class="col-sm-4">
                                <input type="text" class="form-control requiredField" id="taskNoDiv" disabled>
                            </div>
                        </div>
                        <!--Client-->
                        <div class="form-group">
                            <label for="" class="col-sm-3 control-label">Client</label>
                            <div class="col-sm-5">
                                <div id="clientDiv"></div>
                            </div>
                        </div>
                        <!--Product-->
                        <div class="form-group">
                            <label for="" class="col-sm-3 control-label">Product</label>
                            <div class="col-sm-5">
                                <div style="width:330px;" id="productDiv"></div>
                            </div>
                        </div>
                        <!--Caller-->
                        <div class="form-group">
                            <label for="barCode" class="col-sm-3 control-label">Caller</label>
                            <div class="col-sm-6">
                                <input type="text" class="form-control requiredField" id="callerDiv" disabled>
                            </div>
                        </div>
                        <!--Concern-->
                        <div class="form-group">
                            <label for="barCode" class="col-sm-3 control-label">Concern</label>
                            <div class="col-sm-6">
                                <textarea type="" class="form-control requiredField" id="concernDiv" disabled></textarea>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <!--Answered by Staff-->
                        <div class="form-group">
                            <label for="" class="col-sm-3 control-label">Answered By</label>
                            <div class="col-sm-5">
                                <div id="cboStaffNameDiv"></div>
                            </div>
                        </div>
                        <!--Staff Assigned-->
                        <div class="form-group">
                            <label for="" class="col-sm-3 control-label">Staff Assigned</label>
                            <div class="col-sm-5">
                                <div id="cboStaffAssignedDiv"></div>
                            </div>
                        </div>
                        <!--Remarks-->
                        <div class="form-group">
                            <label for="barCode" class="col-sm-3 control-label">Remarks</label>
                            <div class="col-sm-6">
                                <textarea type="" class="form-control requiredField" id="remarksDiv" disabled></textarea>
                            </div>
                        </div>
                        <!--Problem Type-->
                        <div class="form-group">
                            <label for="designation" class="col-sm-3 control-label">Problem Type</label>
                            <div class="col-sm-6">
                                <div style="width:290px;" id="problemTypeDiv"></div>
                            </div>
                        </div>
                        <!--Severity-->
                        <div class="form-group">
                            <label for="designation" class="col-sm-3 control-label">Severity</label>
                            <div class="col-sm-6">
                                <div style="width:250px;" id="severityDiv"></div>
                            </div>
                        </div>
                        <!--Status-->
                        <div class="form-group">
                            <label for="designation" class="col-sm-3 control-label">Status</label>
                            <div class="col-sm-6">
                                <div id="statusDiv"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <ul class="nav nav-tabs">
        <li class="active"><a data-toggle="tab" href="#home">Action</a></li>
        <li><a data-toggle="tab" href="#menu1">Solution</a></li>
    </ul>
    <br />
    <div class="tab-content">
        <div id="home" class="tab-pane fade in active">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <div class="row">
                        <div class="col-md-6"></div>
                        <div class="col-md-6" align="right">
                            <button class="btn btn-primary" id="addTaskSubButton" onclick="cmdShowAddModal()"><i class="fa fa-plus"></i> Add</button>
                        </div>
                    </div>
                </div>
                <div class="panel-body">
                    <div id="actionDiv"></div>
                </div>
            </div>
        </div>
        <div id="menu1" class="tab-pane fade">
            <div class="panel panel-default">
                <div class="panel-body">
                    <form class="form-horizontal" id="add-form">
                        <div class="col-sm-12">
                            <div class="form-group">
                                <label for="barCode" class="col-sm-2 control-label">Solution</label>
                                <div class="col-sm-9">
                                    <textarea type="" class="form-control" id="solutionDiv" disabled></textarea>
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="doneDateDiv" class="col-sm-2 control-label">Done Date</label>
                                <div class="col-sm-6">
                                    <div id="doneDateDiv"></div>
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="doneDateDiv" class="col-sm-2 control-label">Done Time</label>
                                <div class="col-sm-6">
                                    <div id="doneTimeDiv"></div>
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="doneDateDiv" class="col-sm-2 control-label">Verified by</label>
                                <div class="col-sm-6">
                                    <div id="verifiedDiv"></div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/software-js")

<script type="text/javascript">

    var taskId = getParam('TaskId');
    var clientList;
    var taskList;
    var productList;
    var cboStaffName;
    var cboAssignedStaffName;
    var cboClientNameSelectedValue = "";
    var cboProductNameSelectedValue = "";
    var cboStaffNameSelectedValue = "";
    var cboAssignedStaffName;
    var cboStaffVerified;
    var cboAssignedStaffNameSelectedValue = "";
    var cboStaffVerifiedSelectedValue = "";
    var cboProblemType;
    var cboSeverity;
    var cboStatus;
    var cboDateSelectedValue = "";
    var cboDate;
    var doneTimeSelectedValue = "";
    var cancel = 0;
    var doneDate;
    var doneTime;
    var taskSubList;
    var dateCalled;
    var timeCalled;
    var finishedDate;
    var finishedTime;
    var taskSubId;
    var taskSubDateCalled;
    var taskSubFinishedDate;
    var taskSubTimeCalled;
    var taskSubFinishedTime;
    var inptDateCalled;
    var inptTimeCalled;
    var inptFinishedDate;
    var inpFinishedTime;
    var inptTimeCalledSelected = "";
    var inpFinishedTimeSelected = "";
    var userId = 0;



    // =======================
    // Get URL Parameter Value
    // =======================
    function getParam(name) {
        name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
        var regexS = "[\\?&]" + name + "=([^&#]*)";
        var regex = new RegExp(regexS);
        var results = regex.exec(window.location.href);
        if (results == null) {
            return "";
        } else {
            return results[1];
        }
    }

    // =======================
    // Edit Button
    // =======================
    function cmdEdit() {
        cancel = 1;
        $('#editButton').prop('disabled', true);
        $('#saveButton').prop('disabled', false);
        cboBoxClientName.disabled = false;
        cboBoxProductName.disabled = false;
        cboStaffName.disabled = false;
        cboAssignedStaffName.disabled = false;
        $('#callerDiv').prop('disabled', false);
        $('#concernDiv').prop('disabled', false);
        $('#remarksDiv').prop('disabled', false);
        cboProblemType.disabled = false;
        cboSeverity.disabled = false;
        cboStatus.disabled = false;
        cboDate.disabled = false;
        inputTime.disabled = false;
        $('#solutionDiv').prop('disabled', false);
        cboStaffVerified.disabled = false;
    }

    // =======================
    // Cancel Button
    // =======================
    function cmdCancel() {
        if (cancel == 1) {
            $('#cancelConfirm').modal({
                show: true,
                backdrop: 'static'
            });
        } else { window.location = "/Software/Task"; }

    }

    // =======================
    // Update Task
    // =======================
    function cmdUpdate() {
        var taskObject = new Object();
        taskObject.TaskDate = document.getElementById("taskDateDiv").value;
        taskObject.TaskNo = document.getElementById("taskNoDiv").value;
        taskObject.ClientId = cboBoxClientName.selectedValue;
        taskObject.ProductId = cboBoxProductName.selectedValue;
        taskObject.Caller = document.getElementById("callerDiv").value;
        taskObject.Concern = document.getElementById("concernDiv").value;
        taskObject.AnsweredBy = cboStaffName.selectedValue;
        taskObject.StaffId = cboAssignedStaffName.selectedValue;
        taskObject.Remarks = document.getElementById("remarksDiv").value;
        taskObject.ProblemType = cboProblemType.selectedItem;
        taskObject.Severity = cboSeverity.selectedItem;
        taskObject.Status = cboStatus.selectedItem;
        taskObject.Solution = document.getElementById("solutionDiv").value;
        taskObject.DoneDate = doneDate;
        taskObject.DoneTime = doneTime;
        taskObject.VerifiedBy = cboStaffVerified.selectedValue;

        var data = JSON.stringify(taskObject);
        var itemdata = data;

        $.ajax({
            url: '/api/task/update/' + taskId,
            type: 'PUT',
            dataType: 'json',
            data: itemdata,
            contentType: "application/json;charset=utf-8",
            cache: false,
            statusCode: {
                200: function () {
                    toastr.success("Update Sucess");
                    location.reload(true);
                },
                404: function () {
                    toastr.error("Edit Failed");
                },
                400: function () {
                    toastr.error("Edit Failed");
                }
            }
        });
    }

    // =======================
    // Get Tasksub List Data
    // =======================

    function getTaskSubList() {
        var taskSubList = new wijmo.collections.ObservableArray();
        $.ajax({
            url: '/api/tasksub/list/' + taskId,
            cache: false,
            type: 'GET',
            contentType: 'application/json; charset=utf-8',
            //data: data,
            success: function (results) {
                var lastUser = 0;
                if (results.length > 0) {
                    for (i = 0; i < results.length; i++) {

                        taskSubId = results[i]["Id"];
                        taskSubDateCalled = new Date(results[i]["DateCalled"]);
                        taskSubFinishedDate = new Date(results[i]["FinishedDate"]);
                        taskSubTimeCalled = new Date(results[i]["TimeCalled"]);
                        taskSubFinishedTime = new Date(results[i]["FinishedTime"]);

                        //var timeCalled = taskSubTimeCalled.split(" ");
                        //timeCalled = timeCalled.filter(function (n) { return n != "" });
                        //console.log("Time Called: "+timeCalled);

                        //var fTimeCalled = timeCalled[3];

                        //var finishedTime = taskSubFinishedTime.split(" ");
                        //finishedTime = finishedTime.filter(function (n) { return n != "" });

                        //var fFinishedTime = finishedTime[3]

                        var dateCalled = [taskSubDateCalled.getMonth() + 1, taskSubDateCalled.getDate(), taskSubDateCalled.getFullYear()].join('-');
                        var finishedDate = [taskSubFinishedDate.getMonth() + 1, taskSubFinishedDate.getDate(), taskSubFinishedDate.getFullYear()].join('-');
                        //var timeCalled = ([taskSubTimeCalled.value.getFullYear(), taskSubTimeCalled.value.getMonth() + 1, taskSubTimeCalled.value.getDate()].join('-') + " " + [taskSubTimeCalled.value.getHours(), taskSubTimeCalled.value.getMinutes(), taskSubTimeCalled.value.getSeconds()].join(':'));
                        //var finishedTime = [taskSubFinishedTime.getMonth() + 1, taskSubFinishedTime.getDate(), taskSubFinishedTime.getFullYear()].join('-');

                        taskSubList.push({
                            EditId: "<button class='btn btn-primary btn-xs btn-block' id='clientEditButton' onClick='cmdEditTaskSub()'><i class='fa fa-pencil'></i> Edit</button>",
                            DeleteId: "<button class='btn btn-danger btn-xs btn-block' id='clientDeleteButton' onclick='cmdTaskSubConfirmDeleteButton_OnClick()'><i class='fa fa-trash'></i> Delete</button>",
                            Id: results[i]["Id"],
                            TaskId: results[i]["TaskId"],
                            Action: results[i]["Action"],
                            DateCalled: dateCalled,
                            TimeCalled: results[i]["TimeCalled"],
                            FinishedDate: finishedDate,
                            FinishedTime: results[i]["FinishedTime"],
                            Remarks: results[i]["Remarks"]
                        });

                        //console.log(results[i]["Remarks"]);
                    }
                }
            }
        });

        return taskSubList;
    }

    // =======================
    // Add Task Sub
    // =======================
    function cmdAddTaskSub() {

        var taskSubObject = new Object();

        taskSubObject.TaskId = taskId;
        taskSubObject.Action = document.getElementById("actionTaskSubDiv").value;
        taskSubObject.DateCalled = dateCalled;
        taskSubObject.TimeCalled = timeCalled;
        taskSubObject.FinishedDate = finishedDate;
        taskSubObject.FinishedTime = finishedTime;
        taskSubObject.Remarks = document.getElementById("remarksTaskSubDiv").value;

        var data = JSON.stringify(taskSubObject);
        if (taskEntryValidation() == false) {
            toastr.error("Fill out form");
        }
        else {
            if (userId > 0) { //Add
                $.ajax({
                    url: '/api/tasksub/add/',
                    type: 'POST',
                    data: data,
                    contentType: "application/json;charset=utf-8",
                    cache: false,
                    statusCode: {
                        200: function () {
                            toastr.success("Saved");
                        },
                        400: function () {
                            alert("Add Error");
                        },
                    }
                });

                $('#addTaskSub').modal('hide');

                setTimeout(function () { location.reload(true); }, 1000);
            } else { //Update
                var itemdata = data;
                $.ajax({
                    url: '/api/taskSub/update/' + taskSubList.currentItem.Id,
                    type: 'PUT',
                    dataType: 'json',
                    data: itemdata,
                    contentType: "application/json;charset=utf-8",
                    cache: false,
                    statusCode: {
                        200: function () {
                            toastr.success("Update Sucess");
                            $('#addUser').modal('hide');
                            //$('#addUser').remove();
                            location.reload();
                        },
                        404: function () {
                            toastr.error("Edit Failed");
                        },
                        400: function () {
                            toastr.error("Edit Failed");
                        }
                    }
                });

            }
        }

    }

    // =======================
    // Show Modal Add TaskSub
    // =======================
    function cmdShowAddModal() {
        userId = 1;
        $('#addTaskSub').modal('show');
        document.getElementById("actionTaskSubDiv").value = "";


        document.getElementById("remarksTaskSubDiv").value = "";
        document.getElementById("addTaskSubButton").innerHTML = "Add";

    }

    // =======================
    // Edit TaskSub
    // =======================
    function cmdEditTaskSub() {
        $('#addTaskSub').modal('show');

        document.getElementById("actionTaskSubDiv").value = taskSubList.currentItem.Action;

        inptDateCalled.value = new Date(taskSubList.currentItem.DateCalled);
        inptFinishedDate.value = new Date(taskSubList.currentItem.FinishedDate);



        var newTimeCalled = taskSubList.currentItem.TimeCalled.replace("T", " ");
        var newFinishedTime = taskSubList.currentItem.FinishedTime.replace("T", " ");

        console.log("TIME CALLED: " + newTimeCalled);
        inptTimeCalled.value = new Date(newTimeCalled);

        console.log("FINISHED TIME: " + newFinishedTime);
        inpFinishedTime.value = new Date(newFinishedTime);
        //inptTimeCalled.time = placeHolder[1];



        //console.log("TIME: " + taskSubList.currentItem.TimeCalled);
        //console.log("CONVERTED TIME: " + inptTimeCalled.value);


        document.getElementById("remarksTaskSubDiv").value = taskSubList.currentItem.Remarks;
        document.getElementById("addTaskSubButton").innerHTML = "Save";

    }

    // =============================
    // Combo Box Date Called, Time Called, Finished Date, Finish Time
    // =============================
    function createCboDates() {
        //console.log(datecall);
        dCalled = new Date();
        inptDateCalled = new wijmo.input.InputDate('#dateCalledDiv', {
            min: new Date(2014, 01, 01),
            format: 'MM/dd/yyyy',
            value: dCalled,
            onValueChanged: function () {
                dateCalled = [this.value.getFullYear(), this.value.getMonth() + 1, this.value.getDate()].join('-');
                //console.log(dateCalled);
            }
        });
        dateCalled = [inptDateCalled.value.getFullYear(), inptDateCalled.value.getMonth() + 1, inptDateCalled.value.getDate()].join('-');

        //console.log("mia khalifa" + inptTimeCalledSelected);

        //TIME CALLED
        inptTimeCalled = new wijmo.input.InputTime('#timeCalledDiv', {
            step: 1,
            format: 'h:mm tt',
            value: dCalled,
            onValueChanged: function () {
                timeCalled = ([this.value.getFullYear(), this.value.getMonth() + 1, this.value.getDate()].join('-') + " " + [this.value.getHours(), this.value.getMinutes(), this.value.getSeconds()].join(':'));
                //console.log(timeCalled);
            }
        });

        //FINISHED DATE
        fDate = new Date();
        inptFinishedDate = new wijmo.input.InputDate('#finishedDateDiv', {
            min: new Date(2014, 01, 01),
            format: 'MM/dd/yyyy',
            value: fDate,
            onValueChanged: function () {
                finishedDate = [this.value.getFullYear(), this.value.getMonth() + 1, this.value.getDate()].join('-');
                //console.log(finishedDate);
            }
        });
        finishedDate = [inptFinishedDate.value.getFullYear(), inptFinishedDate.value.getMonth() + 1, inptFinishedDate.value.getDate()].join('-');


        //FINISHED TIME
        inpFinishedTime = new wijmo.input.InputTime('#finishedTimeDiv', {
            step: 1,
            format: 'h:mm tt',
            value: dCalled,
            onValueChanged: function () {
                finishedTime = ([this.value.getFullYear(), this.value.getMonth() + 1, this.value.getDate()].join('-') + " " + [this.value.getHours(), this.value.getMinutes(), this.value.getSeconds()].join(':'));
                //console.log(finishedTime);
            }
        });

    }

    // =======================
    // Get Task List Data
    // =======================

    function getTaskList() {
        var result = new wijmo.collections.ObservableArray();
        $.ajax({
            url: '/api/task/list/' + taskId,
            cache: false,
            type: 'GET',
            contentType: 'application/json; charset=utf-8',
            //data: data,
            success: function (results) {
                var lastUser = 0;
                if (results.length > 0) {
                    //console.log("Task");
                    var i = 0;
                    var name = "";
                    document.getElementById("taskDateDiv").value = results[i]["TaskDate"];
                    document.getElementById("taskNoDiv").value = results[i]["TaskNo"];
                    cboClientNameSelectedValue = results[i]["ClientId"];
                    cboProductNameSelectedValue = results[i]["ProductId"];
                    document.getElementById("callerDiv").value = results[i]["Caller"];
                    document.getElementById("concernDiv").value = results[i]["Concern"];
                    cboStaffNameSelectedValue = results[i]["AnsweredBy"];
                    cboAssignedStaffNameSelectedValue = results[i]["StaffId"];
                    document.getElementById("remarksDiv").value = results[i]["Remarks"];
                    cboProblemType.selectedValue = results[i]["ProblemType"];
                    cboSeverity.selectedValue = results[i]["Severity"];
                    cboStatus.selectedValue = results[i]["Status"];
                    document.getElementById("solutionDiv").value = results[i]["Solution"];
                    cboStaffVerifiedSelectedValue = results[i]["VerifiedBy"];
                    cboDateSelectedValue = results[i]["DoneDate"];
                    doneTimeSelectedValue = results[i]["DoneTime"];
                    //console.log(doneTimeSelectedValue);

                    result.push({
                        Id: results[i]["Id"],
                        TaskNo: results[i]["TaskNo"],
                        TaskDate: results[i]["TaskDate"],
                        ClientId: results[i]["ClientId"],
                        Caller: results[i]["Caller"],
                        Concern: results[i]["Concern"],
                        AnsweredBy: results[i]["AnsweredBy"],
                        StaffId: results[i]["StaffId"],
                        ProductId: results[i]["ProductId"],
                        Remarks: results[i]["Remarks"],
                        Status: results[i]["Status"],
                        ProblemType: results[i]["ProblemType"],
                        Severity: results[i]["Severity"],
                        Solution: results[i]["Solution"],
                        DoneDate: results[i]["DoneDate"],
                        DoneTime: results[i]["DoneTime"],
                        VerifiedBy: results[i]["VerifiedBy"],
                        IsLocked: results[i]["IsLocked"]
                    });


                    //DONE DATE
                    dDate = new Date();

                    var p = cboDateSelectedValue.split(" ");
                    p = p.filter(function (n) { return n != "" });
                    //console.log(p);
                    var month = p[0];
                    var day = parseInt(p[1], 10);
                    var year = parseInt(p[2], 10);

                    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
                    for (var i = 0; i <= 11; i++) {
                        if (month == months[i]) {
                            var fmonth = i;
                        }
                    }

                    dDate.setDate(day);
                    if (fmonth <= 9) {
                        dDate.setMonth("0" + fmonth);
                    } else {
                        dDate.setMonth(fmonth);
                    }

                    dDate.setFullYear(year);
                    // create InputDate control
                    cboDate = new wijmo.input.InputDate('#doneDateDiv', {
                        min: new Date(2014, 01, 01),
                        format: 'MM/dd/yyyy',
                        value: dDate,
                        disabled: true,
                        onValueChanged: function () {
                            doneDate = [this.value.getFullYear(), this.value.getMonth() + 1, this.value.getDate()].join('-');
                        }
                    });
                    doneDate = [cboDate.value.getFullYear(), cboDate.value.getMonth() + 1, cboDate.value.getDate()].join('-');

                    var dTime = new Date();

                    var time = doneTimeSelectedValue.split(" ");
                    time = time.filter(function (n) { return n != "" });
                    console.log(time);

                    var t = time[3];

                    var hour = t.split(":"); //hh : mm
                    console.log(hour);


                    var m = hour[1];
                    minute = m.split("");

                    var tm = minute[2];
                    console.log(tm);
                    var hh = parseInt(hour[0], 10);
                    if (tm == "P") {  //time PM, add 12
                        if (hh != 12) {
                            fhour = parseInt(hour[0], 10);
                            dTime.setHours(fhour + 12);
                            console.log(fhour);
                        } else {
                            fhour = parseInt(hour[0], 10);
                            dTime.setHours(fhour);
                            console.log(fhour);
                        }

                    } else { //if time is AM
                        fhour = parseInt(hour[0], 10);
                        dTime.setHours(fhour);
                        console.log(fhour);
                    }

                    var minutes = minute[0] + minute[1];

                    var fminute = parseInt(minutes, 10);

                    dTime.setMinutes(fminute);
                    console.log(fminute);

                    console.log(dTime);

                    // DONE TIME
                    inputTime = new wijmo.input.InputTime('#doneTimeDiv', {
                        min: new Date(2014, 8, 1, 7, 0),
                        max: new Date(2014, 8, 1, 20, 0),
                        step: 1,
                        format: 'h:mm tt',
                        value: dTime,
                        disabled: true,
                        onValueChanged: function () {
                            doneTime = ([this.value.getFullYear(), this.value.getMonth() + 1, this.value.getDate()].join('-') + " " + [this.value.getHours(), this.value.getMinutes(), this.value.getSeconds()].join(':'));

                        }
                    });
                    doneTime = ([inputTime.value.getFullYear(), inputTime.value.getMonth() + 1, inputTime.value.getDate()].join('-') + " " + [inputTime.value.getHours(), inputTime.value.getMinutes(), inputTime.value.getSeconds()].join(':'));
                    getStaffName();
                }

                getClientName();
                getProduct();
            }
        });

        return result;
    }

    // =============================
    // Combo Box Wijmo - Client
    // =============================

    function cboClientName(clientList) {
        cboBoxClientName = new wijmo.input.ComboBox('#clientDiv', {
            placeholder: "Select Client",
            displayMemberPath: "CompanyName",
            selectedValuePath: "Id",
            itemsSource: clientList,
            disabled: true,
            selectedValue: cboClientNameSelectedValue.toString()

        });

        cboBoxClientName.onSelectedIndexChanged = function () {
        }
    }

    // ==================
    // Get Client Data
    // ==================

    function getClientName() {
        clientList = new wijmo.collections.ObservableArray();
        $.ajax({
            url: '/api/client/list',
            cache: false,
            type: 'GET',
            contentType: 'application/json; charset=utf-8',
            data: {},
            success: function (results) {
                var lastUser = 0;
                if (results.length > 0) {
                    for (i = 0; i < results.length; i++) {
                        clientList.push({
                            Id: results[i]["Id"],
                            CompanyName: results[i]["CompanyName"]
                        });
                    }
                    cboClientName(clientList);
                } else {
                    cboClientName(clientList);
                }
            }
        });

        return clientList;
    }

    // ==================
    // Get Product Data
    // ==================

    function getProduct() {
        productList = new wijmo.collections.ObservableArray();
        $.ajax({
            url: '/api/product/list',
            cache: false,
            type: 'GET',
            contentType: 'application/json; charset=utf-8',
            data: {},
            success: function (results) {
                var lastUser = 0;
                if (results.length > 0) {
                    for (i = 0; i < results.length; i++) {
                        productList.push({
                            Id: results[i]["Id"],
                            ProductCode: results[i]["ProductCode"],
                            ProductDescription: results[i]["ProductDescription"]
                        });
                    }
                    cboProductName(productList);
                } else {
                    cboProductName(productList);
                }
            }
        });

        return productList;
    }

    // =============================
    // Combo Box Wijmo - Product
    // =============================

    function cboProductName(productList) {
        cboBoxProductName = new wijmo.input.ComboBox('#productDiv', {
            placeholder: "Select Product",
            displayMemberPath: "ProductDescription",
            selectedValuePath: "Id",
            itemsSource: productList,
            isEditable: false,
            disabled: true,
            selectedValue: cboProductNameSelectedValue.toString()
        });
    }

    // ==================
    // Get StaffName Data
    // ==================

    function getStaffName() {
        var staffList = new wijmo.collections.ObservableArray();
        $.ajax({
            url: '/api/staff/list',
            cache: false,
            type: 'GET',
            contentType: 'application/json; charset=utf-8',
            data: {},
            success: function (results) {

                //console.log("Staff");
                var lastUser = 0;
                if (results.length > 0) {
                    for (i = 0; i < results.length; i++) {
                        staffList.push({
                            Id: results[i]["Id"],
                            StaffName: results[i]["StaffName"]
                        });
                    }
                    createCboStaff(staffList);
                    createCboStaffAssignedName(staffList);
                    createCboStaffVerified(staffList);

                } else {
                    createCboStaff(staffList);
                    createCboStaffAssignedName(staffList);
                    createCboStaffVerified(staffList);
                }
            }
        });

        return staffList;
    }

    // =============================
    // Combo Box Wijmo - Staff Name
    // =============================

    function createCboStaff(staffList) {
        cboStaffName = new wijmo.input.ComboBox('#cboStaffNameDiv', {
            placeholder: "Select Staff",
            displayMemberPath: "StaffName",
            selectedValuePath: "Id",
            itemsSource: staffList,
            isEditable: false,
            disabled: true,
            selectedValue: cboStaffNameSelectedValue.toString()
        });
    }

    // =============================
    // Combo Box Wijmo - Staff Assigned
    // =============================

    function createCboStaffAssignedName(staffList) {
        cboAssignedStaffName = new wijmo.input.ComboBox('#cboStaffAssignedDiv', {
            placeholder: "Select Staff",
            displayMemberPath: "StaffName",
            selectedValuePath: "Id",
            itemsSource: staffList,
            isEditable: false,
            disabled: true,
            selectedValue: cboAssignedStaffNameSelectedValue.toString()
        });
    }

    // =============================
    // Combo Box Wijmo - Staff Assigned Verified
    // =============================

    function createCboStaffVerified(staffList) {
        cboStaffVerified = new wijmo.input.ComboBox('#verifiedDiv', {
            placeholder: "Select Staff",
            displayMemberPath: "StaffName",
            selectedValuePath: "Id",
            itemsSource: staffList,
            disabled: true,
            isEditable: false,
            selectedValue: cboStaffVerifiedSelectedValue.toString()
        });
    }

    // ==============
    //  Problem Type
    // ==============

    function getProblemTypes() {
        return ["New Installation",
                "Software bug",
                "Data Tracing",
                "New Feature",
                "Hardware or Infrastructure Problem",
                "Retraining",
                "Reinstallation",
                "Program Update",
                "Data Archiving/Truncate",
                "Implementation"];
    }

    // ==============
    //  Severity
    // ==============

    function getSeverity() {
        return ["High (3hrs. resolution)",
                "Moderate (1 day resolution)",
                "Low (2 day resolution)",
                "Gossip"];
    }

    // ==============
    //  Status
    // ==============

    function getStatus() {
        return ["Pending/On-going",
                "Done",
                "Cancelled",
                "Waiting for Client"];
    }

    // =============================
    // Combo Box Wijmo - Problem Type
    // =============================

    function createProblemTypeCboBox() {
        cboProblemType = new wijmo.input.ComboBox('#problemTypeDiv', {
            itemsSource: getProblemTypes(),
            placeholder: 'Select Problem',
            disabled: true,
            isEditable: false
        });

    }

    // =============================
    // Combo Box Wijmo - Severity
    // =============================

    function createSeverityCboBox() {
        cboSeverity = new wijmo.input.ComboBox('#severityDiv', {
            itemsSource: getSeverity(),
            placeholder: 'Select Severity',
            disabled: true,
            isEditable: false
        });

    }

    // =========================
    // TAsk Entry Validation
    // =========================
    function taskEntryValidation() {
        var isValid = true;
        $('.requiredField').each(function () {
            if ($.trim($(this).val()) == '') {
                isValid = false;
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        return isValid;
    }

    // =============================
    // Combo Box Wijmo - Status
    // =============================

    function createStatusCboBox() {
        cboStatus = new wijmo.input.ComboBox('#statusDiv', {
            itemsSource: getStatus(),
            placeholder: 'Select Status',
            disabled: true,
            isEditable: false
        });
    }

    // =====================
    // Staff delete Button
    // =====================
    function cmdTaskSubConfirmDeleteButton_OnClick() {

        $('#deleteTaskSubConfirm').modal({
            show: true,
            backdrop: 'static'
        });
        $("#cmdConfirmDeleteStaff").prop("disabled", false);
        $("#cmdConfirmDeleteCloseButton").prop("disabled", false);
    }
    // Company Confirm Delete Button
    function cmdDeleteTaskSub() {
        $("#cmdConfirmDeleteStaff").prop("disabled", true);
        $("#cmdConfirmDeleteCloseButton").prop("disabled", true);

        //====================
        //console.log(taskSubId);

        $.ajax({
            url: '/api/tasksub/delete/' + taskSubId,
            type: "DELETE",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            statusCode: {
                200: function () {
                    $('#deleteTaskSubConfirm').modal('hide');
                    toastr.success("Successfully Deleted");
                    setTimeout(function () { location.reload(true); }, 1000);

                },
                404: function () {
                    toastr.error("Request Not Found");
                    $('#deleteTaskSubConfirm').modal('hide');
                    $("#cmdConfirmDeleteStaff").prop("disabled", false);
                    $("#cmdConfirmDeleteCloseButton").prop("disabled", false);
                    alert("uuhhh");
                },
                400: function () {
                    toastr.error("Can't be deleted");
                    $('#deleteTaskSubConfirm').modal('hide');
                    alert("di ma delete ");
                }
            }
        });
    }

    function cmdPrint() {
        //window.open = "/RepTaskDetail/TaskDetailController?TaskId=" + taskId;
        var win = window.open("/RepTaskDetail/TaskDetailController?TaskId=" + taskId, '_blank');
        win.focus();
    }


    $(document).ready(function () {

        getTaskList();


        createProblemTypeCboBox();
        createSeverityCboBox();
        createStatusCboBox();


        taskSubList = new wijmo.collections.CollectionView(getTaskSubList());

        taskSubList.canFilter = true;
        taskSubList.pageSize = 15;

        $('#saveButton').prop('disabled', true);

        //Flex Grid
        taskSubGrid = new wijmo.grid.FlexGrid('#actionDiv');
        taskSubGrid.initialize({
            columns: [

           {
               "header": "Edit",
               "binding": "EditId",
               "width": 70,
               "align": "center",
               "isContentHtml": true
           },
            {
                "header": "Delete",
                "binding": "DeleteId",
                "width": 90,
                "align": "center",
                "isContentHtml": true

            },
            {
                "header": "Action",
                "binding": "Action",
                "align": "left",
                "allowSorting": true,
                "width": "7*"
            },
            {
                "header": "Date Called",
                "binding": "DateCalled",
                "align": "left",
                "allowSorting": true,
                "width": "2*"
            },
            {
                "header": "Time Called",
                "binding": "TimeCalled",
                "align": "left",
                "allowSorting": true,
                "width": "2*"
            },
            {
                "header": "Finished Date",
                "binding": "FinishedDate",
                "align": "left",
                "allowSorting": true,
                "width": "2*"
            },
            {
                "header": "Finished Time",
                "binding": "FinishedTime",
                "align": "left",
                "allowSorting": true,
                "width": "2*"
            }],
            autoGenerateColumns: false,
            itemsSource: taskSubList,
            isReadOnly: true,
            autoSizeMode: wijmo.grid.AutoSizeMode.Both,
            allowDragging: wijmo.grid.AllowDragging.None,
            selectionMode: wijmo.grid.SelectionMode.Row
        });

        taskSubGrid.trackChanges = true;




        createCboDates();


    });


</script>

@Html.Partial("Footer")